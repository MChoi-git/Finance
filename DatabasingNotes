Database design basics
-From microsoft site: https://support.microsoft.com/en-us/office/database-design-basics-eb2159cf-1e30-401a-8084-bd4f9c9ca1f5

Terms to know:
-Table: Rows and columns 
	-Rows -> Record
	-Column -> field

Good db design?
-Duplicate information is BAD
	-Wastes space and increases error %
-Correctness & completeness is important
-Therefore, good design:
	1. Divides info into subject-based tables to reduce redundancy
	2. Provides db with the info it requires to join the information in the tables together
	   as needed
	3. Helps support and ensure the accuracy and integrity of your information
	4. Accomodates your data processing and reporting needs
Design process:
	1. Determine the purpose of the db
	2. Find and organize the info req'd
		-{id, ticker name, EPS, previous day close, P/E, forward P/E, 52w low}
	3. Divide the info into tables
		-{tickers, ticker financials}
	4. Turn info items into columns
		-root:{id, ticker name}
		-info(AKA financials):{id,EPS, previous day close, 52w low}
		-ratios:{id,P/E, Forward P/E} (forward P/E tbd)
	5. Specify primary keys
		-primary key: id
	6. Set up the table relationships
	7. Refine the design
	8. Apply the normalization rules
Design notes:
	-"Garbage in, garbage out"
	-Use primary key-foreign key relationships
	-Remember to make use of backups 
	-Avoid deleting data, instead choose to activate or deactivate data
		-Can also archive and update a record with changes
	-Consider security , ie. don't use root for apps 
	-Compartmentalize data (into "screens") and put each compartment into a table
	-Do not store duplicate data
	-Make sure each table makes sense for the application
	-Follow normalization rules:
		1. Elminate repear info, create separate tables for relational data, use primary keys to identify each record
		2. Create separate tables for each set of relational data, use foreign keys to link related tables
		3. Eliminate fields that don't relate to the primary key
	-Stick to a standard naming convention (ie. lower-case with underscores)
	-Look into user variables and views


Actual design to be implemented:
	Table 1: Root 
==============================
| id | ticker | company_name |
=============================
|    |        |              |
|    |        |              |
=============================
id<SMALLINT>: Primary key
ticker<VARCHAR>: Stores equity/security ticker
company_name<VARCHAR>: Stores the actual company name

	Table 2: OHLC
-Displays the OHLC history for all tickers
==================================================
| id | date | open | high | low | close | volume |
==================================================
|    |      |      |      |     |       |        |
|    |      |      |      |     |       |        |
=================================================
id<SMALLINT>: Foreign key to identify equity/security
date<DATE>: Day the price information was updated
open,high,low,close<MEDIUMINT>: OHLC for equity/security
volume<BIGINT>: Daily volume

	Table 3: Financials
-Contains all the non-calculated financial data for all tickers
-The information contained here depends on the business thesis for the trades
-This db will contain some general metrics which may or may not be useful for the business theses
==============================================================================================================================================================
| id | date |  debt_to_equity_ratio | dividend_yield | earnings_per_diluted_share | gross_profit | net_income | price_to_earnings_ratio | revenues_usd | ... |
==============================================================================================================================================================
|    |      |                       |                |                            |              |            |                         |              |     |
|    |      |                       |                |                            |              |            |                         |              |     |
==============================================================================================================================================================
id<SMALLINT>: Foreign key to identify equity/security
date<DATE>: Day the price information was updated
debt_to_equity_ratio<FLOAT>
dividend_yield<FLOAT>
earnings_per_diluted_share<FLOAT>
gross_profit<BIGINT>
net_income<BIGINT>
price_to_earnings_ratio<FLOAT>
revenues_usd<BIGINT>




